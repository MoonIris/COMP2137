
#!/bin/bash

#This script is for the intended purpose of giving a full system report

#$() surronds pretty much every variable to execute them as a command 
#Using ; to have more then one output on the same line
#I make two variables, one named USER which uses $USER to grab the user and another called CURRENT_DATE to grab the date

USER="$USER" 
CURRENT_DATE=$(date)
 
#This is the system information section
#HOSTNAME-I do the same thing as $USER to get HOSTNAME, using $HOSTNAME. Needs to be all caps
#OS- For OS I use hostnameclt and well as grep -E, -E to make it more flexible in its serach. Then use awk to print out only the distro's name and version
#UPTIME- Uptime using uptime -p to only give the uptime without the extra fluff. Used sed to get rid of up to make it look cleaner 

HOSTNAME="$HOSTNAME"
OS=$(hostnamectl | grep -E 'Operating System:' | awk '/Operating System:/ {print $3, $4, $5}')
UPTIME=$(uptime -p | sed 's/up//')

#This is the hardware information section
#CPU- I get the cpu info using lscpu and you grep -E with ^ to only grab the line wiht the make and model then use awk -F to remove the : and print only the info needed. Then sed to remove all the white space and make it look nice for the report 
#RAM- is very similar to CPU. This time using free -h and using grep -E to get the mem size that is installed and using awk to only print the installed ram, no extras
#DISKS- I use lsblk to bring up the disks using -o to only display NAME,SIZE,MODEL and use grep -v to exclude any lines which have loop. Leaving only the installed disks
#VIDEO- I use lspci to bring up Video and use grep to grab VGA and awk -F : to print only after the third : leaving only the make and model of the video

CPU=$(lscpu | grep -E '^Model name' | awk -F ':' '{print $2}' | sed 's/^[[:space:]]*//') 
RAM=$(free -h | grep -E '^Mem:' | awk '{print $2}')
DISKS=$(lsblk -o NAME,SIZE,MODEL | grep -v loop | column -t)
VIDEO=$(lspci | grep -E VGA | awk -F ':' '{print $3}') 

#This is the network information section
#FQDN- Simply line using hostname --fqdn to specifically only grab the FQDN
#HOST ADDRESS- I use ip addr show to show address and use grep -E to grab all inet lines while using grep -EV to exclude inet6 lines and 127.0.0.1 to exclude the local host leaving only the host address. Then awk to print only the host address on the line
#GATEWAY IP- using ip rote. Using grep to grab only the default and awk to only print the IP
#DNS SERVER- Using cat I display the contents of /etc/resolv.conf. Then I use grep to grab only the line with the dns name server and then awk to only print the ip of the dns server

FQDN=$(hostname --fqdn) 
HOST_ADDRESS=$(ip addr show | grep -E 'inet' | grep -Ev 'inet6|127.0.0.1' | awk '{print $2}') 
GATEWAY_IP=$( ip route | grep -E  default | awk '{print $3}')
DNS_SERVER=$( cat /etc/resolv.conf | grep -E '^nameserver' | awk '{print $2}')

#This is the system status section
#USERS LOGGED IN- Used users instead of who and used tr to replace blank spaces with commas to make it the same as the example output
#DISK SPACE- use df to get the disk space and output to output the surce, available free space, and where it is mounted
#PROCESS COUNT- I use ps -e to grab every process count. Then use wc -l specifically to count all the lines that are  
#LOAD AVERAGE- Use cat to display the contents of loadavg and use awk -F to print the first three, which is only the load average 
#LISTENING NETWORK PORTS- ss -l to only bring up the listening ports. Then grep to only grab lines with listen. Awk to print only the port numbers and then to get them matched up like the example I use paste  -sd, to merge the lines horizontally with a comma between each 

USERS_LOGGED_IN=$(users | tr ' ' ',') 
DISK_SPACE=$(df --output=source,avail,target | column -t)
PROCESS_COUNT=$(ps -e | wc -l)
LOAD_AVERAGE=$(cat /proc/loadavg | awk '{print $1, $2, $3}') 
LISTENING_NETWORK_PORTS=$(ss -l | grep LISTEN | awk '{print $4}' | paste -sd,)

#A bit different then the rest of them. I needed to use an if else statement to check in the ufw.conf to see if it was enabled or not then echo accordingly. Tried other options but they all needed root privliges
UFW_STATUS=$(if grep -q '^ENABLED=yes' /etc/ufw/ufw.conf; then
	echo 'ENABLED'
else
	echo 'DISABLED'
fi)

#Using cat EOF for my output template
cat <<EOF

System Report Generated By $USER, $CURRENT_DATE

System Information
------------------
Hostname: $HOSTNAME
OS: $OS
UPTIME: $UPTIME

Hardware Information
--------------------
CPU: $CPU
RAM: $RAM
DISK(S): 
$DISKS
VIDEO: $VIDEO

Network Information
-------------------
FQDN: $FQDN
HOST ADDRESS: $HOST_ADDRESS
GATEWAY IP: $GATEWAY_IP
DNS SERVER: $DNS_SERVER

System Status
-------------
USERS LOGGED IN: $USERS_LOGGED_IN
DISK SPACE: 
$DISK_SPACE
PROCESS COUNT: $PROCESS_COUNT
LOAD AVERAGE: $LOAD_AVERAGE
UFW STATUS: $UFW_STATUS

EOF
#EOF to denote the end of file output template used. Space included as per instructions

