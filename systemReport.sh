
#!/bin/bash

#This script is for the intended purpose of giving a full system report

#Echo used alone for spaceing purposes
#Using -n to keep outputs on the same line and ; to have more then one output on the same line
#This first part here gives the current user using $USER to grab the cureent user  and uses date to print the date and time
echo
echo -n 'System Report generated by' "$USER"', ' ; date
echo
#This is the system information section
#HOSTNAME-I do the same thing as $USER to get HOSTNAME, using $HOSTNAME. Needs ti be all caps
#OS- For OS I use hostnameclt and well as grep -E, -E to make it more flexible in its serach. Then use awk to print out only the distro's name and version
#UPTIME- Uptime using uptime -p to only give the uptime without the extra fluff. Used sed to get rid of up to make it look cleaner 
echo 'System Information'
echo '------------------'
echo 'HOSTNAME: ' "$HOSTNAME"
echo -n 'OS: ' ; hostnamectl | grep -E 'Operating System:' | awk '/Operating System:/ {print $3, $4, $5}'
echo -n 'UPTIME: ' ; uptime -p | sed 's/up//'
echo
#This is the hardware information section
#CPU- I get the cpu info using lscpu and you grep -E with ^ to only grab the line wiht the make and model then use awk -F to remove the : and print only the info needed. Then sed to remove all the white space and make it look nice for the report 
#RAM- is very similar to CPU. This time using free -h and using grep -E to get the mem size that is installed and using awk to only print the installed ram, no extras
#DISKS- I use lsblk to bring up the disks using -o to only display NAME,SIZE,MODEL and use grep -v to exclude any lines which have loop. Leaving only the installed disks
#VIDEO- I use lspci to bring up Video and use grep to grab VGA and awk -F : to print only after the third : leaving only the make and model of the video
echo 'Hardware Information'
echo '--------------------'
echo -n 'CPU: ' ;  lscpu | grep -E '^Model name' | awk -F ':' '{print $2}' | sed 's/^[[:space:]]*//' 
echo -n 'RAM: ' ; free -h | grep -E '^Mem:' | awk '{print $2}'
echo 'DISK(S): ' ; lsblk -o NAME,SIZE,MODEL | grep -v loop
echo -n 'VIDEO: ' ; lspci | grep -E VGA | awk -F ':' '{print $3}' 
echo
#This is the network information section
#FQDN- Simply line using hostname --fqdn to specifically only grab the FQDN
#HOST ADDRESS- I use ip addr show to show address and use grep -E to grab all inet lines while using grep -EV to exclude inet6 lines and 127.0.0.1 to exclude the local host leaving only the host address. Then awk to print only the host address on the line
#GATEWAY IP- using ip rote. Using grep to grab only the default and awk to only print the IP
#DNS SERVER- Using cat I display the contents of /etc/resolv.conf. Then I use grep to grab only the line with the dns name server and then awk to only print the ip of the dns server
echo 'Network Information'
echo '-------------------'
echo -n 'FQDN: ' ; hostname --fqdn 
echo -n 'HOST ADDRESS: ' ; ip addr show | grep -E 'inet' | grep -Ev 'inet6|127.0.0.1' | awk '{print $2}'   
echo -n 'GATEWAY IP: ' ; ip route | grep -E  default | awk '{print $3}'
echo -n 'DNS SERVER: ' ; cat /etc/resolv.conf | grep -E '^nameserver' | awk '{print $2}' 
echo
#This is the system status section
#USERS LOGGED IN- Used users instead of who and used tr to replace blank spaces with commas to make it the same as the example output
#DISK SPACE- use df to get the disk space and output to output the surce, available free space, and where it is mounted
#PROCESS COUNT- I use ps -e to grab every process count. Then use wc -l specifically to count all the lines that are  
#LOAD AVERAGE- Use cat to display the contents of loadavg and use awk -F to print the first three, which is only the load average 
#LISTENING NETWORK PORTS- ss -l to only bring up the listening ports. Then grep to only grab lines with listen. Awk to print only the port numbers and then to get them matched up like the example I use paste  -sd, to merge the lines horizontally with a comma between each 
echo 'System Status'
echo '-------------'
echo -n 'USERS LOGGED IN: ' ; users | tr ' ' ',' 
echo 'DISK SPACE: ' ; df --output=source,avail,target
echo -n 'PROCESS COUNT: ' ; ps -e | wc -l
echo -n 'LOAD AVERAGE: ' ; cat /proc/loadavg | awk '{print $1, $2, $3}' 
echo -n 'LISTENING NETWORK PORTS: ' ; ss -l | grep LISTEN | awk '{print $4}' | paste -sd,

#A bit different then the rest of them. I needed to use an if else statement to check in the ufw.conf to see if it was enabled or not then echo accordingly. Tried other options but they all needed root privliges
if grep -q '^ENABLED=yes' /etc/ufw/ufw.conf; then
	echo 'UFW STATUS: ENABLED'
else
	echo 'UFW STATUS: DISABLED'
fi
echo
